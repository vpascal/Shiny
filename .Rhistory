pattern <- grep("Number of all unique users to library", data$Question, useBytes = T)
users<-data[pattern,]
users$Answer<-as.numeric(users$Answer)
users<-users%>% group_by(Date) %>% summarise(Answer = sum(Answer,na.rm = TRUE))
users$Date<-as.Date(users$Date)
# Gender
pattern<-agrep("Total number of registered/unic users of each gender",x=data$Question,useBytes=T)
gender<-data[pattern,]
gender$Answer<-as.numeric(gender$Answer)
gender<-gender%>% group_by(Date,Question) %>% summarise(Answer = sum(Answer,na.rm = TRUE))
gender<-cast(gender, Date~Question,value = Answer)
View(gender)
View(gender)
gender<-cast(gender, Date~Question~Answer)
View(gender)
pattern<-agrep("Total number of registered/unic users of each gender",x=data$Question,useBytes=T)
gender<-data[pattern,]
gender$Answer<-as.numeric(gender$Answer)
gender<-gender%>% group_by(Date,Question) %>% summarise(Answer = sum(Answer,na.rm = TRUE))
View(gender)
View(gender)
pattern<-agrep("Total number of registered/unic users of each gender",x=data$Question,useBytes=T)
gender<-data[pattern,]
gender$Answer<-as.numeric(gender$Answer)
gender<-gender%>% group_by(Date,Question) %>% summarise(Answer = sum(Answer,na.rm = TRUE))
View(gender)
gender<-cast(gender, Date~Question+Answer)
View(gender)
gender<-cast(gender, Date~Question+Answer)
gender<-cast(gender, Date~Question~Answer)
gender<-cast(gender, Date~Question, Answer)
gender<-cast(gender, Date~Question, "Answer")
gender<-cast(gender, Date~Question, Answer)
gender<-cast(gender, Date~Question+Answer)
gender<-cast(gender, Date~Question)
View(gender)
pattern<-agrep("Total number of registered/unic users of each gender",x=data$Question,useBytes=T)
gender<-data[pattern,]
gender$Answer<-as.numeric(gender$Answer)
gender<-gender%>% group_by(Date,Question) %>% summarise(Answer = sum(Answer,na.rm = TRUE))
gender<-cast(gender, Date~Question, Answer)
names(gender)
gender<-cast(gender, Date+Question~Answer)
gender<-cast(gender, Date~Question|Answer)
gender<-cast(gender, Date~Question+Answer)
gender<-cast(gender, Date~Question)
pattern<-agrep("Total number of registered/unic users of each gender",x=data$Question,useBytes=T)
gender<-data[pattern,]
gender$Answer<-as.numeric(gender$Answer)
gender<-gender%>% group_by(Date,Question) %>% summarise(Answer = sum(Answer,na.rm = TRUE))
gender<-cast(gender, Date~Question, value="Answer")
pattern<-agrep("Total number of registered/unic users of each gender",x=data$Question,useBytes=T)
gender<-data[pattern,]
gender$Answer<-as.numeric(gender$Answer)
gender<-gender%>% group_by(Date,Question) %>% summarise(Answer = sum(Answer,na.rm = TRUE))
gender<-cast(gender, Date~Question, value="Answer")
gender$Total<-gender[,2]+gender[,3]
gender$Percent_Female<-gender[,2]/gender[,4]*100
gender$Percent_Male<-gender[,3]/gender[,4]*100
gender<-gender[,c("Date","Percent_Female","Percent_Male")]
gender<-as.data.frame(gender)
gender<-melt(gender,"Date")
gender$Date<-as.Date(gender$Date)
#Age
pattern<-agrep("year",x=data$Question,useBytes=T)
data_age<-data[pattern,]
data_age$Answer<-as.numeric(data_age$Answer)
data_age<-cast(data_age,Date~Question, sum,na.rm=T)
pattern<-agrep("year",x=data$Question,useBytes=T)
data_age<-data[pattern,]
data_age$Answer<-as.numeric(data_age$Answer)
data_age<-cast(data_age,Date~Question, value="Answer",sum,na.rm=T)
data_age$Total<-data_age[,2]+data_age[,3]+data_age[,4]+data_age[,5]
data_age$Percent_0_16<-data_age[,2]/data_age$Total*100
shiny::runApp()
shiny::runApp()
area%>%
ggvis(x=~long,y=~lat, stroke := "white") %>%
group_by(group) %>%
layer_paths() %>%
layer_paths(fill=~Key) %>%
hide_axis("x")%>%
hide_axis("y") %>%
add_tooltip(function(area) sprintf(area$Key))
rm(mtc)
area$id <- 1:nrow(area)
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- area[area$id == x$id, ]
paste0(names(row), ": ", format(row), collapse = "<br />")
}
area%>%
ggvis(x=~long,y=~lat, stroke := "white",key := ~id) %>%
group_by(group) %>%
layer_paths() %>%
layer_paths(fill=~Key) %>%
hide_axis("x")%>%
hide_axis("y") %>%
add_tooltip(all_values, "hover")
View(area)
View(area)
area%>%
ggvis(x=~long,y=~lat, stroke := "white",key := ~Value) %>%
group_by(group) %>%
layer_paths() %>%
layer_paths(fill=~Key) %>%
hide_axis("x")%>%
hide_axis("y") %>%
#layer_points() %>%
add_tooltip(all_values, "hover")
area$id <- 1:nrow(area)
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- area[area$id == x$id, ]
paste0(names(row), ": ", format(row), collapse = "<br />")
}
area%>%
ggvis(x=~long,y=~lat, stroke := "white",key := ~id) %>%
group_by(group) %>%
layer_paths() %>%
layer_paths(fill=~Key) %>%
hide_axis("x")%>%
hide_axis("y") %>%
add_tooltip(function(area) sprintf(area$Key))
area$id <- 1:nrow(area)
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- area[area$id == x$id, ]
paste0(names(row), ": ", format(row), collapse = "<br />")
}
area%>%
ggvis(x=~long,y=~lat, stroke := "white") %>%
group_by(group) %>%
layer_paths() %>%
layer_paths(fill=~Key) %>%
hide_axis("x")%>%
hide_axis("y") %>%
add_tooltip(all_values, "hover")
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- area[area$id == x$id, ]
paste0(names(row), ": ", format(row), collapse = "<br />")
}
area%>%
ggvis(x=~long,y=~lat, stroke := "white") %>%
group_by(group) %>%
layer_paths() %>%
layer_paths(fill=~Key) %>%
hide_axis("x")%>%
hide_axis("y") %>%
add_tooltip(all_values, "hover")
shiny::runApp()
shiny::runApp()
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- area[area$id == x$id, ]
paste0(names(row[,4]), ": ", format(row), collapse = "<br />")
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
area$id <- 1:nrow(area)
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- area[area$id == x$id, ]
paste0(names(row), ": ", format(row), collapse = "<br />")
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
area$id <- 1:nrow(area)
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- area[area$id %in% x$id, ]
paste0(names(row), ": ", format(row), collapse = "<br />")
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
area%>%
ggvis(x=~long,y=~lat, stroke := "white") %>%
group_by(group) %>%
layer_paths() %>%
layer_paths(fill=~Key) %>%
hide_axis("x")%>%
hide_axis("y") %>%
#layer_points() %>%
add_tooltip(all_values(area$Key), "hover")
shiny::runApp()
shiny::runApp()
shiny::runApp()
detach("package:shinyapps", unload=TRUE)
library("shinyapps", lib.loc="~/R/win-library/3.1")
terminateApp("Novateca")
deployApp("Novateca")
deployApp(appName = "Novateca")
shiny::runApp()
terminateApp("Novateca")
deployApp(appName = "Novateca")
users%>%
ggvis(x=~Date,y=~Answer) %>%
layer_lines() %>%
layer_points() %>%
add_axis("x", title = "")%>%
add_axis("y", title = "")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
mtcars %>% ggvis(~wt, ~mpg) %>%
layer_smooths(se = input_checkbox(label = "Confidence interval"))
input_checkbox(label = "Confidence interval")
input_checkbox(label = "Confidence interval", value = TRUE)
# Used in layer_smooths
mtcars %>% ggvis(~wt, ~mpg) %>%
layer_smooths(se = input_checkbox(label = "Confidence interval"))
model_type <- input_checkbox(label = "Use flexible curve",
map = function(val) if(val) "loess" else "lm")
mtcars %>% ggvis(~wt, ~mpg) %>%
layer_model_predictions(model = model_type)
mtcars %>% ggvis(~wt, ~mpg) %>%
layer_smooths(se = input_checkbox(label = "Confidence interval"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
model_type<-input_checkbox(label="Trend", map=function(val) if(val) shiny::layer_model_predictions(model = "lm", stroke:="red", se=TRUE))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?props
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
library(dplyr)
library(ggvis)
library(reshape)
#library(rgdal)
#library(rgeos)
#library(maptools)
#gpclibPermit()
load("a.RData")
options(stringsAsFactors = FALSE)
data <- read.csv("report_2014-06-26.csv", sep="\t",header=TRUE)
trim <- function (x) gsub("^\\s+|\\s+$+|\\?", "", x)
replace<-function (x) gsub("unic", "unique", x)
data<-as.data.frame(apply(data,MARGIN=2,FUN=trim))
data<-as.data.frame(apply(data,MARGIN=2,FUN=replace))
data<-data[which(data$Question !="Upload other documents" & data$Question !="Upload photos"),]
data<-data[which(data$Name !="Biblioteca Publica de Drept" & data$Name !="Biblioteca Nationala a Republicii Moldova"),]
data<-data[data$Raion != "Chisinau",]
# users
data$Question[data$Question=="Number of all new unique users to library"]<-"Number of all unique users to library"
pattern <- grep("Number of all unique users to library", data$Question, useBytes = T)
users<-data[pattern,]
users$Answer<-as.numeric(users$Answer)
users<-users%>% group_by(Date) %>% summarise(Answer = sum(Answer,na.rm = TRUE))
users$Date<-as.Date(users$Date)
# Gender
pattern<-agrep("Total number of registered/unic users of each gender",x=data$Question,useBytes=T)
gender<-data[pattern,]
gender$Answer<-as.numeric(gender$Answer)
gender<-gender%>% group_by(Date,Question) %>% summarise(Answer = sum(Answer,na.rm = TRUE))
gender<-cast(gender, Date~Question, value="Answer")
gender$Total<-gender[,2]+gender[,3]
gender$Percent_Female<-gender[,2]/gender[,4]*100
gender$Percent_Male<-gender[,3]/gender[,4]*100
gender<-gender[,c("Date","Percent_Female","Percent_Male")]
gender<-as.data.frame(gender)
gender<-melt(gender,"Date")
gender$Date<-as.Date(gender$Date)
#Age
pattern<-agrep("year",x=data$Question,useBytes=T)
data_age<-data[pattern,]
data_age$Answer<-as.numeric(data_age$Answer)
data_age<-cast(data_age,Date~Question, value="Answer",sum,na.rm=T)
data_age$Total<-data_age[,2]+data_age[,3]+data_age[,4]+data_age[,5]
data_age$Percent_0_16<-data_age[,2]/data_age$Total*100
data_age$Percent_17_30<-data_age[,3]/data_age$Total*100
data_age$Percent_31_57<-data_age[,4]/data_age$Total*100
data_age$Percent_58_above<-data_age[,5]/data_age$Total*100
data_age<-data_age[,c("Date","Percent_0_16","Percent_17_30","Percent_31_57","Percent_58_above")]
names(data_age)<-c("Date","% 0-16","% 17-30","% 31-57","% 58-above")
data_age<-as.data.frame(data_age)
data_age<-melt(data_age,id=c("Date"))
data_age$Date<-as.Date(data_age$Date)
#Visits
pattern<-grep("physical visits", data$Question,useBytes=T)
visits<-data[pattern,]
visits$Question[visits$Question=="Total number of physical visits in May"]<-"Total number of physical visits"
visits$Question[visits$Question=="Total number of physical visits in June"]<-"Total number of physical visits"
visits$Question[visits$Question=="Total number of physical visits during this month"]<-"Total number of physical visits"
visits$Answer<-as.numeric(visits$Answer)
visits<-cast(visits,Date~Question, value="Answer",sum,na.rm=T)
names(visits)<-c("Date","Visits")
visits$Date<-as.Date(visits$Date)
# Event Participants
pattern<-grep("Total number of event visitors", data$Question,useBytes=T)
participants<-data[pattern,]
participants$Question[participants$Question=="Total number of event visitors/persons in May"]<-"Total number of event visitors/persons"
participants$Question[participants$Question=="Total number of event visitors/persons in June"]<-"Total number of event visitors/persons"
participants$Answer<-as.numeric(participants$Answer)
participants<-participants%>% group_by(Date) %>% summarise(Answer = sum(Answer,na.rm = TRUE))
participants$Date<-as.Date(participants$Date)
users%>%
ggvis(x=~Date,y=~Answer) %>%
layer_lines() %>%
layer_points() %>%
add_axis("x", title = "")%>%
add_axis("y", title = "")%>%
layer_model_predictions(model = "lm", stroke:="red", se=TRUE) %>%
scale_numeric("y", domain = c(0, 15000))%>%
layer_text("Number of Library Users",props("y"))
users%>%
ggvis(x=~Date,y=~Answer) %>%
layer_lines() %>%
layer_points() %>%
add_axis("x", title = "")%>%
add_axis("y", title = "")%>%
layer_model_predictions(model = "lm", stroke:="red", se=TRUE) %>%
scale_numeric("y", domain = c(0, 15000))%>%
layer_text("Number of Library Users",props=(y="y"))
yes
users%>%
ggvis(x=~Date,y=~Answer) %>%
layer_lines() %>%
layer_points() %>%
add_axis("x", title = "")%>%
add_axis("y", title = "")%>%
layer_model_predictions(model = "lm", stroke:="red", se=TRUE) %>%
scale_numeric("y", domain = c(0, 15000))%>%
layer_text("Number of Library Users", props(y))
#bind_shiny("u")
users%>%
ggvis(x=~Date,y=~Answer) %>%
layer_lines() %>%
layer_points() %>%
add_axis("x", title = "")%>%
add_axis("y", title = "")%>%
layer_model_predictions(model = "lm", stroke:="red", se=TRUE) %>%
scale_numeric("y", domain = c(0, 15000))%>%
layer_text(propersties("y"))
users%>%
ggvis(x=~Date,y=~Answer) %>%
layer_lines() %>%
layer_points() %>%
add_axis("x", title = "")%>%
add_axis("y", title = "")%>%
layer_model_predictions(model = "lm", stroke:="red", se=TRUE) %>%
scale_numeric("y", domain = c(0, 15000))%>%
layer_text(props("y"))
users%>%
ggvis(x=~Date,y=~Answer) %>%
layer_lines() %>%
layer_points() %>%
add_axis("x", title = "")%>%
add_axis("y", title = "")%>%
layer_model_predictions(model = "lm", stroke:="red", se=TRUE) %>%
scale_numeric("y", domain = c(0, 15000))%>%
layer_text(prop("y"))
area%>%
ggvis(x=~long,y=~lat, stroke := "white", text="test") %>%
group_by(group) %>%
layer_paths() %>%
layer_paths(fill=~Key) %>%
hide_axis("x")%>%
hide_axis("y") %>%
#layer_points() %>%
#	add_tooltip(all_values(area[,2]), "hover") %>%
add_tooltip(function(area) sprintf(area$Key))%>%
set_options(width = 400, height = 500)%>%
)
users%>%
ggvis(x=~Date,y=~Answer,text="test") %>%
layer_lines() %>%
layer_points() %>%
add_axis("x", title = "")%>%
add_axis("y", title = "")%>%
layer_model_predictions(model = "lm", stroke:="red", se=TRUE) %>%
scale_numeric("y", domain = c(0, 15000))%>%
prop("y"))
users%>%
ggvis(x=~Date,y=~Answer,text="test") %>%
layer_lines() %>%
layer_points() %>%
add_axis("x", title = "")%>%
add_axis("y", title = "")%>%
layer_model_predictions(model = "lm", stroke:="red", se=TRUE) %>%
scale_numeric("y", domain = c(0, 15000))%>%
scale_numeric("y", domain = c(0, 15000))
tension
users%>%
ggvis(x=~Date,y=~Answer,text="test") %>%
layer_lines() %>%
layer_points() %>%
add_axis("x", title = "")%>%
add_axis("y", title = "")%>%
layer_model_predictions(model = "lm", stroke:="red", se=TRUE) %>%
scale_numeric("y", domain = c(0, 15000))
#bind_shiny("u")
yes
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a("code.css")
HTML("<link rel="stylesheet" type="text/css" href="code.css">")
HTML("link rel="stylesheet" type="text/css" href="code.css"")
tag$HTML("link rel="stylesheet" type="text/css" href="code.css"")
<"link rel="stylesheet" type="text/css" href="code.css"/>)
HTML(<"link rel="stylesheet" type="text/css" href="code.css"/>))
HTML("<"link rel="stylesheet" type="text/css" href="code.css"/>"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tags$div(HTML("<head>link rel= "stylesheet" type="text/css" href="code.css"></head>"))
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "code.css")
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(ggplot2)
library(animation)
load("C:/Users/Vladislav Pascal/Documents/a.RData")
ggplot(area,aes(long, lat))+geom_polygon(aes(group=group),colour="white", fill="#00A6FF")+
geom_point(data=a,aes(coords.x1,coords.x2),colour="black", size=2)+
geom_polygon(data =transn, aes(long, lat,group=group),colour="white", fill="grey")+coord_map()+
theme(panel.border=element_blank(),panel.grid.major=element_blank(),panel.background=element_blank(),axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank())
ggplot(area,aes(long, lat))+geom_polygon(aes(group=group),colour="white", fill="#00A6FF")+
geom_point(data=a,aes(coords.x1,coords.x2),colour="black", size=1)+
geom_polygon(data =transn, aes(long, lat,group=group),colour="white", fill="grey")+coord_map()+
theme(panel.border=element_blank(),panel.grid.major=element_blank(),panel.background=element_blank(),axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank())
